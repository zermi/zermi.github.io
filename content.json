{"meta":{"title":"Zhangxuezhi's Blog","subtitle":null,"description":null,"author":"Zermi","url":"http://yoursite.com"},"pages":[{"title":"","date":"2017-09-27T03:46:02.903Z","updated":"2017-09-27T03:46:02.903Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"关于我从事web前端开发，目前使用es6 webpack sass react等技术；对react十分钟爱，热爱新技术，新事物。 关于工作目前在长春工作，未来可能去任何地方工作。o.0。 关于座右铭All for the sake of high position and great wealth（一切都是为了荣华富贵）没错，就是这么直白。 关于爱好研发（很有成就感），足球，游泳，音乐，追女孩。 关于联系我 QQ：137486714 Weibo 微信不告诉你。"}],"posts":[{"title":"我的React之setState异步","slug":"setState","date":"2017-11-24T02:09:15.000Z","updated":"2017-11-28T02:28:29.252Z","comments":true,"path":"2017/11/24/setState/","link":"","permalink":"http://yoursite.com/2017/11/24/setState/","excerpt":"","text":"我的React之setState异步！setState 前言：经过一个项目的探索和忙碌，终于在测试间隙腾出时间总结一二。setState的问题最为实用和突出，放在最先总结。首先，官网对setState的描述是不保证立即更改应用状态。也就是说它存在同步和异步两种情况，由于同步还没遇到这种情况，所以先总结异步，如果未来乃至某一天遇到了同步并造成了某些诡异问题，再来更新总结同步问题。大部分情况，我们所写的代码都在react组件的控制下，所以setState会以异步的方式执行。12345678910111213141516171819export default class setStateDemo extends UIComponent&#123; // 这是我们公司自己封装的底层库，功能与React.Component类同。 get className()&#123; return &quot;setStateDemo&quot;; &#125; get isRegisterEvent()&#123; return false; &#125; ... initState()&#123; // 我们创建state的方法，这个是在constructor下的，所以都一样啦。 let state = super.initState(); // 演示用状态 state.demo = &quot;初始值&quot;; return state; &#125; componentDidMount()&#123; this.setState(&#123;demo : &quot;变化值&quot;&#125;)； console.log(this.state.demo) &#125;&#125; 在浏览器打印出的值为 初始值。显然并不是我们所想的变化值，所以这也就是所说的setState是异步的。 当然，往往我们想要的是setState之后的变化值官方给出的方法是回调函数（callback），setState支持第二个参数。即callback])```123456``` componentDidMount()&#123; this.setState(&#123;demo : &quot;变化值&quot;&#125;,()=&gt;&#123; console.log(this.state.demo) &#125;)； &#125; 这里返回的就是我们想要的变化值。而为什么setState要设计为异步执行？由于setState改变状态值从而还会进一步控制render，react会在组件渲染后统一合并这些setState，然后再次渲染。在我的理解看，这对性能会有很大提升，如果同步执行可能会造成组件多次重复渲染。 我觉得，很多时候回调函数并不是我们想要的方法很多时候我觉得并不会用到这个回调函数去解决问题（我和我的同志目前还没用过）,大多情况下，我们只是需要改变setState值从而去控制其他部分的渲染或判断某些逻辑而不是在修改后立即做出某些指令。所以更多的时候我在使用if判断这些状态值去控制渲染。不过这里存在一些坑。由于我们公司也是第一次从JQ转成React，很多东西都在探索中。当通过接口获取数据之后，我们将获取的数据存入data状态中，由于setState是异步加载，所以第一次渲染页面的时候，data是空的，一旦你在其他地方调用data中的属性就会报错。所以目前我们采用&& this.state.data.use)&#123;&#125;```的方式去跳过第一次渲染（我一直认为这样可能会存在一些问题，或者这不是优质的方法，所以如有优质方法，欢迎推荐）123#### 关于setState第一参数是对象和函数的区别当遇到一个状态多次setState时，由于setState异步传递对象会造成很多隐患，react并不会把对象合并。 this.setState({demo: this.state.demo + 1},()=&gt;{console.log(this.state.demo)}) this.setState({demo: this.state.demo + 1},()=&gt;{console.log(this.state.demo)}) this.setState({demo: this.state.demo + 1},()=&gt;{console.log(this.state.demo)}) 1这个时候打印的三个demo都是1。 this.setState((state)=&gt;{ return {demo: state.demo + 1} },()=&gt;{console.log(this.state.demo)}) this.setState((state)=&gt;{ return {demo: state.demo + 1} },()=&gt;{console.log(this.state.demo)}) this.setState((state)=&gt;{ return {demo: state.demo + 1} },()=&gt;{console.log(this.state.demo)}) ```而这个打印的结果全为3。","categories":[{"name":"React","slug":"React","permalink":"http://yoursite.com/categories/React/"}],"tags":[{"name":"React","slug":"React","permalink":"http://yoursite.com/tags/React/"},{"name":"前端UI库","slug":"前端UI库","permalink":"http://yoursite.com/tags/前端UI库/"}]},{"title":"利用react编写UI组件库总结","slug":"React、","date":"2017-09-05T02:09:15.000Z","updated":"2017-09-25T11:01:23.085Z","comments":true,"path":"2017/09/05/React、/","link":"","permalink":"http://yoursite.com/2017/09/05/React、/","excerpt":"","text":"利用react编写UI组件库总结 前言本人很幸运的赶上了公司的转型，从传统的jq转向模块化开发。由于公司研发力量有限（全公司人数700+），老项目众多，许多老人无法脱身，所以本人有幸一直参与UI库的各项工作。研发过程中，发现之中也发现了很多问题，打算一一总结下来，以备日后逐一优化，不断学习，如果能为他人提供帮助自然更好。由于革命尚未完成，会持续更新。 一、样式问题1.1 尽量避免使用内联样式目前基本组件的编写已经基本结束，只剩下一些如富文本编辑器，文章等稍复杂一些的组件交给老人去编写。本人被分配到编写学习演示网页的工作，在编写演示组件模块时，发现了这个问题。为了让使用者清晰明了的了解组件的属性接口，我采用演示效果配合代码的演示方式。在演示过程中发现，原组件的默认样式对使用造成很大影响，当然我们会提供类名接口和style接口以便于大家修改样式，不过这显然造成了一些重复工作。但这不是我们讨论的重点，重点在于我们的组件中少部分采用了内联样式，包括利用js判断之后添加的样式，比如说箭头位置利用absolute定位，","categories":[{"name":"React","slug":"React","permalink":"http://yoursite.com/categories/React/"}],"tags":[{"name":"React","slug":"React","permalink":"http://yoursite.com/tags/React/"},{"name":"前端UI库","slug":"前端UI库","permalink":"http://yoursite.com/tags/前端UI库/"}]}]}